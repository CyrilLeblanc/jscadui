{
  "version": 3,
  "sources": ["../src/defMatrix.js", "../src/matrix2str.js", "../src/makeItem.js", "../src/pushObjectComponent.js", "../src/pushObjectMesh.js", "../src/toDate3mf.js", "../src/staticFiles.js", "../index.js"],
  "sourcesContent": ["/* prettier-ignore */\r\nexport const defMatrix = [\r\n    1, 0, 0, 0,\r\n    0, 1, 0, 0,\r\n    0, 0, 1, 0,\r\n    0, 0, 0, 1\r\n  ]\r\n", "\r\n/** transform for attribute as specifiend in 3mf format\r\n * \r\n * When objects need to be transformed for rotation, scaling, or translation purposes, \r\n * row-major affine 3D matrices (4x4) are used. The matrix SHOULD NOT be singular or nearly singular.\r\n * Transforms are of the form, where only the first 3 column values are specified. \r\n * The last column is never provided, and has the fixed values 0.0, 0.0, 0.0, 1.0. \r\n * When specified as an attribute value, \r\n * matrices have the form \"m00 m01 m02 m10 m11 m12 m20 m21 m22 m30 m31 m32\" \r\n * where each value is a decimal number of arbitrary precision.\r\n * \r\n * @return string tarnsform attribute value\r\n*/\r\nexport const matrix2str = m=>{\r\n    let str = ''\r\n    for(let i=0; i<16; i++){\r\n        if(i % 4 == 3) continue\r\n        if(i>0) str += ' '\r\n        str += m[i] || 0\r\n    }\r\n    return str\r\n}", "import { defMatrix } from './defMatrix.js'\r\nimport { matrix2str } from './matrix2str.js'\r\n\r\nexport const makeItem = (id = 0, matrix = defMatrix) =>\r\n  `    <item objectid=\"${id}\" transform=\"${matrix2str(matrix)}\" />\\n`\r\n", "export function pushObjectWithComponents(out, id, items){\r\n  \r\n    out.push(`<object id=\"${id}\" type=\"model\">\\n`)\r\n    out.push(` <components>\\n`)\r\n    items.forEach(part => {\r\n        addComp(out, part.id, part.transforms)\r\n    })\r\n    out.push(` </components>\\n`)\r\n    out.push(`</object>\\n`)\r\n  }\r\n\r\n  const addComp = (out, id = 0, matrix = defMatrix) => {\r\n    out.push(`    <component objectid=\"${id}\" transform=\"${matrix2str(matrix)}\" />\\n`)\r\n  }\r\n", "/**\r\n * \r\n * @param out {Arrray<string>}\r\n * @param obj \r\n * @returns \r\n */\r\nexport function pushObjectWithMesh(out,id, vertices, indices){\r\n    out.push(\r\n`  <object id=\"${id}\" type=\"model\">\r\n   <mesh>\r\n    <vertices>\r\n`\r\n    )\r\n\r\n    for(let i=0; i<vertices.length; i+=3){\r\n        out.push(`     <vertex x=\"${vertices[i]}\" y=\"${vertices[i+1]}\" z=\"${vertices[i+2]}\" />\\n`)\r\n    }\r\n\r\n    out.push(\r\n`    </vertices>\r\n    <triangles>\r\n`\r\n    )\r\n\r\n    for(let i=0; i<indices.length; i+=3){\r\n        out.push(`     <triangle v1=\"${indices[i]}\" v2=\"${indices[i+1]}\" v3=\"${indices[i+2]}\" />\\n`)\r\n    }\r\n\r\n\r\n    out.push(\r\n`    </triangles>\r\n   </mesh>\r\n  </object>\r\n`\r\n    )\r\n\r\n    return out\r\n}", "export const toDate3mf = d => (d ? d.toISOString().substring(0, 10) : '')\r\n", "\r\n/** File that describes content types inside a 3mf  */\r\nexport const fileForContentTypes = {\r\n  name:'[Content_Types].xml',\r\n  content: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\r\n<Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" />\r\n<Default Extension=\"model\" ContentType=\"application/vnd.ms-package.3dmanufacturing-3dmodel+xml\" />\r\n<Default Extension=\"png\" ContentType=\"image/png\" />\r\n</Types>`\r\n}\r\n\r\n/** File that describes content types inside a 3mf  */\r\nexport const fileForRelThumbnail = {\r\n  name:'_rels/.rels',\r\n  content: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\r\n<Relationship Target=\"/3D/3dmodel.model\" Id=\"rel-1\" Type=\"http://schemas.microsoft.com/3dmanufacturing/2013/01/3dmodel\" />\r\n<Relationship Target=\"/Metadata/thumbnail.png\" Id=\"rel-2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail\" />\r\n</Relationships>`\r\n}\r\n", "// this implementation exports to 3mf by filling array of strings and doing join at the encoding\r\n// tests for large files have shown significant speedup related to using string concatenation\r\nimport { makeItem } from './src/makeItem.js'\r\nimport { matrix2str } from './src/matrix2str.js'\r\nimport { pushObjectWithComponents } from './src/pushObjectComponent.js'\r\nimport { pushObjectWithMesh } from './src/pushObjectMesh.js'\r\nimport { toDate3mf } from './src/toDate3mf.js'\r\n\r\nexport * from './src/staticFiles.js'\r\n\r\n// items to be placed on the sene (build section of 3mf)\r\nlet items = []\r\n\r\nexport function to3dmodel({\r\n  simple = [],\r\n  meshes = [],\r\n  components = [],\r\n  unit = 'millimeter',\r\n  title = 'jscad model',\r\n  author = '',\r\n  description = '',\r\n  application = 'jscad',\r\n  creationDate = new Date(),\r\n  license = '',\r\n  modificationDate,\r\n}) {\r\n  let out = [\r\n    `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<model unit=\"${unit}\" xml:lang=\"en-US\" xmlns=\"http://schemas.microsoft.com/3dmanufacturing/core/2015/02\" xmlns:slic3rpe=\"http://schemas.slic3r.org/3mf/2017/06\">\r\n <metadata name=\"slic3rpe:Version3mf\">1</metadata>\r\n <metadata name=\"Title\">${title}</metadata>\r\n <metadata name=\"Designer\">${author}</metadata>\r\n <metadata name=\"Description\">${description || title}</metadata>\r\n <metadata name=\"Copyright\"></metadata>\r\n <metadata name=\"LicenseTerms\">${license}</metadata>\r\n <metadata name=\"Rating\"></metadata>\r\n <metadata name=\"CreationDate\">${toDate3mf(creationDate)}</metadata>\r\n <metadata name=\"ModificationDate\">${toDate3mf(modificationDate || creationDate)}</metadata>\r\n <metadata name=\"Application\">${application}</metadata>\r\n <resources>\r\n`,\r\n  ]\r\n  //#region resources\r\n  simple.forEach(({ id, vertices, indices, transforms }) => {\r\n      pushObjectWithMesh(out, id, vertices, indices)\r\n      items.push(makeItem(id, transforms))\r\n    })\r\n    meshes.forEach(({ id, vertices, indices, transforms }) => pushObjectWithMesh(out, id, vertices, indices))\r\n    \r\n  components.forEach(({ id, items, transforms }) => {\r\n    pushObjectWithComponents(id,items)\r\n    items.push(makeItem(id, transforms))\r\n})\r\n\r\n  //#endregion\r\n  out.push(\r\n    ` </resources>\r\n <build>\r\n `,\r\n    ...items,\r\n    `</build>\r\n</model>`,\r\n  )\r\n\r\n  return out.join('')\r\n}\r\n"],
  "mappings": "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",
  "names": ["defMatrix", "matrix2str", "m", "str", "i", "makeItem", "id", "matrix", "defMatrix", "matrix2str", "pushObjectWithComponents", "out", "id", "items", "part", "addComp", "matrix", "pushObjectWithMesh", "out", "id", "vertices", "indices", "i", "toDate3mf", "d", "fileForContentTypes", "fileForRelThumbnail", "items", "to3dmodel", "simple", "meshes", "components", "unit", "title", "author", "description", "application", "creationDate", "license", "modificationDate", "out", "toDate3mf", "id", "vertices", "indices", "transforms", "pushObjectWithMesh", "makeItem", "pushObjectWithComponents"]
}
